# run from project directory
# docker compose -f <PROJECT_PATH>/backend-sampler/etc/docker-compose/docker-compose.local.observability.yml up --build --force-recreate
services:
    prometheus:
        container_name: prometheus
        volumes:
            - '../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml'
        image: dockerhub-dockerio.icellmobilsoft.hu/prom/prometheus:v2.40.2
        ports:
            - '9090:9090'
    grafana:
        container_name: grafana
        volumes:
            - '../config/grafana/provisioning/:/etc/grafana/provisioning/'
        image: dockerhub-dockerio.icellmobilsoft.hu/grafana/grafana:11.1.0
        ports:
            - '3000:3000'
        environment:
            GF_SMTP_ENABLED: true
            GF_SMTP_HOST: mailpit:1025
            GF_SMTP_FROM_NAME: grafana
            GF_SMTP_FROM_ADDRESS: grafana@sample.hu
    jaeger:
        container_name: jaeger
        image: dockerhub-dockerio.icellmobilsoft.hu/jaegertracing/all-in-one:1.52
        volumes:
            - '../config/jaeger/sampling_strategies.json:/etc/jaeger/sampling_strategies.json'
        ports:
            #- '5775:5775/udp' # 5775  |UDP  |agent     |accept zipkin.thrift over compact thrift protocol
            - '6831:6831/udp' # 6831  |UDP  |agent     |accept jaeger.thrift over compact thrift protocol
            #- '6832:6832/udp' # 6832  |UDP  |agent     |accept jaeger.thrift over binary thrift protocol
            #- '5778:5778'     # 5778  |HTTP |agent     |serve configs
            - '16686:16686'   # 16686 |HTTP |query     |serve frontend
            #- '14268:14268'   # 14268 |HTTP |collector |accept jaeger.thrift directly from clients
            #- '9411:9411'     # 9411  |HTTP |collector |Zipkin compatible endpoint
            # https://www.jaegertracing.io/docs/1.52/apis/
            #- '14268:14268' # Collector |14268 |/api/sampling |HTTP/JSON |Recommended for most SDKs
            #- '14250:14250' # Collector |14250 |sampling.proto |gRPC |For SDKs that want to use gRPC (e.g. OpenTelemetry Java SDK)
    opentelemetry-collector:
        container_name: opentelemetry-collector
        #TODO collector "The number of requests this listener has served" but should have "Number of all requests"
        image: otel/opentelemetry-collector:0.92.0
        # contrib collector repo e.g. tail_sampling processor
        # https://github.com/open-telemetry/opentelemetry-collector-contrib
        # image: otel/opentelemetry-collector-contrib:0.92.0
        command: [--config=/etc/otel-collector-config.yaml]
        volumes:
            - ../config/opentelemetry/otel-collector-config.yaml:/etc/otel-collector-config.yaml
#            - ../config/opentelemetry/otel-collector-probabilistic-sampling-config.yaml:/etc/otel-collector-config.yaml
#            - ../config/opentelemetry/otel-collector-tail-sampling-config.yaml:/etc/otel-collector-config.yaml
            # example sampling strategies to otelcol 
            - ../config/jaeger/sampling_strategies.json:/etc/otelcol/sampling_strategies.json
        ports:
            - 1888:1888 # pprof extension
            - 8888:8888 # Prometheus metrics exposed by the collector
            - 8889:8889 # Prometheus exporter metrics
            - 13133:13133 # health_check extension
            - 4317:4317 # OTLP gRPC receiver
            - 4318:4318 # OTLP http receiver
            - 55679:55679 # zpages extension
            - 1234:1234 # /metrics endpoint
    mailpit:
        container_name: mailpit
        image: axllent/mailpit:v1.20.1
        restart: unless-stopped
        ports:
            - '8025:8025'
            - '1025:1025'
        environment:
            TZ: Europe/Budapest
networks:
    default:
        name: bs-local-network
